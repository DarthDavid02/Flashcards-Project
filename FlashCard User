class NextCardListener implements ActionListener {
    @Override
    public static void actionPerformed(ActionEvent e) {
        FlashCard card = new FlashCard(question.getText(), answer.getText());
        cardList.add(card);
        clearCard();
    }
}

    class SaveMenuListener implements ActionListener {
        @Override
        public static void actionPerformed(ActionEvent e) {
            FlashCard card = new FlashCard(question.getText(), answer.getText());
            cardList.add(card);
            JFileChooser fileSave = new JFileChooser();
            fileSave.showSaveDialog(frame);
            saveFile(fileSave.getSelectedFile());
        }
    

        private void saveFile(File selectedFile) {
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile));

                for( FlashCard card : cardList) {
                    writer.write(card.getQuestion() + " /");
                    writer.write(card.getAnswer() + "\n");
                }
                writer.close();
            } catch (Exception e) {
                System.out.println("Error: Couldn't write to file.");
                e.printStackTrace();
            }
        }
    }
    
    
//NEW CODE FOR USER FLASH CARD


     class NextCardListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isShowAnswer) {
                    display.setText(currentCard.getAnswer());
                    showAnswerButton.setText("Next Card");
                    isShownswer = false;
                }else {
                    display.setText("That was the last card.");
                    showAnswerButton.setEnabled(false);
                }
            }
        

            private void loadFile(File selectedFile) {
                cardList = new ArrayList<FlashCard>();

                try {
                    BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
                    String line = null;
                    
                    while((line = reader.readLine()) != null) {
                        makeCard(line);
                    }
                } catch (Exception e) {
                    System.out.println("File Error");
                    e.printStackTrace();
                }
                cardIterator = cardList.iterator();
                showNextCard();
            }
        

            private void makeCard(String lineToParse) {
                String[] result = lineToParse.split("/");

                FlashCard card = new FlashCard(result[0], result [1]);
                cardList.add(card);
                System.out.println("Made a Card");
            }

            private void showNextCard() {
                currentCard = (FlashCard) cardIterator.next();

                display.setText(currentCard.getQuestion());
                showAnswerButton.setText("Show Answer");
                isShowAnswer = true;
            }

            private void showNextCard() {
                currentCard = (FlashCard) cardIterator.next();

                display.setText(currentCard.getQuestion());
                showAnswerButton.setText("Show Answer");
                isShowAnswer = true;
            }
        }
