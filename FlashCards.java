
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author donov
 */
public class FlashCards extends javax.swing.JFrame {

    /**
     * Creates new form FlashCards
     */
    
    //0 = Question ... side = 1 = Answer
    private ArrayList <Cards> flashCards = new ArrayList<Cards>();
    //used to hold filtered out cards
    RevistCards filter = new RevistCards();
    //private ArrayList <Cards> filter = new ArrayList<Cards>();
    //an index to keep track which card we're looking at
    private int cardCount = 0;
    boolean isFlipped = false;
    //reference to quiz window to be sent to cardMaker window
    private Timer barTimer;
    private File currentFile;
    
    public FlashCards() {
        initComponents();
        //makeCardList();
       this.clearDisplayFrame();
       timeBar.setVisible(false);
       sortMnu.setVisible(false);
    }
    //Since the display and maker frames share an ArrayList, this clears and resets the frame
    //that displays the flashcards
    private void clearDisplayFrame()
    {
       cardNumLabel.setVisible(false);
       nextBtn.setVisible(false);
       prevBtn.setVisible(false);
       flashCardBtn.setText("");
       cardCount=0;
       flashCards.clear();
    }

    public int getCardCount()
    {
        return cardCount;
    }
    private void clearRevisit()
    {
        revistChk.setSelected(false);
        showRevisitOnlyChk.setSelected(false);
    }
    public void checkVis()
    {
      //hides next button if at end of list so user doesn't go out of bounds
      if(cardCount == flashCards.size()-1)
      {
        nextBtn.setVisible(false);
      }
      else
      {
        nextBtn.setVisible(true);
      }
      
      //hides previous button if at start of list so user doesn't go out of bounds
      if(cardCount == 0)
      {
        prevBtn.setVisible(false);
      }
      else
      {
        prevBtn.setVisible(true);
      }
    }
    
    public void showCard(int side, Cards currentCard)
    {
        revistChk.setSelected(currentCard.isMarked());
        flashCardBtn.setText(currentCard.getSide(side));
        cardNumLabel.setText(currentCard.getCardNum() + "/" + flashCards.size());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveFileFrame = new javax.swing.JFrame();
        openFileFrame = new javax.swing.JFrame();
        sortGroup = new javax.swing.ButtonGroup();
        prevBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        cardNumLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        flashCardBtn = new javax.swing.JTextArea();
        timeBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        markedCardsMnu = new javax.swing.JMenu();
        revistChk = new javax.swing.JCheckBoxMenuItem();
        markedCardRevistMnu = new javax.swing.JMenu();
        showRevisitOnlyChk = new javax.swing.JCheckBoxMenuItem();
        saveRevistCards = new javax.swing.JMenuItem();
        optionMnu = new javax.swing.JMenu();
        cardMakerItem = new javax.swing.JMenuItem();
        randmCards = new javax.swing.JCheckBoxMenuItem();
        sortMnu = new javax.swing.JMenu();
        noneRadio = new javax.swing.JRadioButtonMenuItem();
        ascRadio = new javax.swing.JRadioButtonMenuItem();
        descRadio = new javax.swing.JRadioButtonMenuItem();
        mCardsFirstRadio = new javax.swing.JRadioButtonMenuItem();
        mCardsSecRadio = new javax.swing.JRadioButtonMenuItem();
        jMenu3 = new javax.swing.JMenu();
        timerToggle = new javax.swing.JCheckBoxMenuItem();

        saveFileFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        saveFileFrame.setTitle("Export");
        saveFileFrame.setAlwaysOnTop(true);

        javax.swing.GroupLayout saveFileFrameLayout = new javax.swing.GroupLayout(saveFileFrame.getContentPane());
        saveFileFrame.getContentPane().setLayout(saveFileFrameLayout);
        saveFileFrameLayout.setHorizontalGroup(
            saveFileFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        saveFileFrameLayout.setVerticalGroup(
            saveFileFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        openFileFrame.setAlwaysOnTop(true);

        javax.swing.GroupLayout openFileFrameLayout = new javax.swing.GroupLayout(openFileFrame.getContentPane());
        openFileFrame.getContentPane().setLayout(openFileFrameLayout);
        openFileFrameLayout.setHorizontalGroup(
            openFileFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        openFileFrameLayout.setVerticalGroup(
            openFileFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        prevBtn.setText("Previous");
        prevBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBtnActionPerformed(evt);
            }
        });

        nextBtn.setText("Next");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        cardNumLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cardNumLabel.setText("0/0");

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        flashCardBtn.setEditable(false);
        flashCardBtn.setColumns(20);
        flashCardBtn.setFont(new java.awt.Font("Trebuchet MS", 0, 24)); // NOI18N
        flashCardBtn.setLineWrap(true);
        flashCardBtn.setRows(5);
        flashCardBtn.setWrapStyleWord(true);
        flashCardBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        flashCardBtn.setFocusable(false);
        flashCardBtn.setMargin(new java.awt.Insets(35, 35, 35, 35));
        flashCardBtn.setRequestFocusEnabled(false);
        flashCardBtn.setVerifyInputWhenFocusTarget(false);
        flashCardBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                flashCardBtnMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(flashCardBtn);

        jMenu1.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        jMenuBar1.add(jMenu1);

        markedCardsMnu.setText("Mark Cards");

        revistChk.setText("Check For Revisiting");
        revistChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revistChkActionPerformed(evt);
            }
        });
        markedCardsMnu.add(revistChk);

        markedCardRevistMnu.setText("Revist Marked Cards");

        showRevisitOnlyChk.setText("Show Marked Cards Only");
        showRevisitOnlyChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRevisitOnlyChkActionPerformed(evt);
            }
        });
        markedCardRevistMnu.add(showRevisitOnlyChk);

        markedCardsMnu.add(markedCardRevistMnu);

        saveRevistCards.setText("Save Checked Cards");
        saveRevistCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRevistCardsActionPerformed(evt);
            }
        });
        markedCardsMnu.add(saveRevistCards);

        jMenuBar1.add(markedCardsMnu);

        optionMnu.setText("Options");

        cardMakerItem.setText("Make Flash Cards");
        cardMakerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardMakerItemActionPerformed(evt);
            }
        });
        optionMnu.add(cardMakerItem);

        randmCards.setText("Randomize Cards");
        randmCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randmCardsActionPerformed(evt);
            }
        });
        optionMnu.add(randmCards);

        sortMnu.setText("Sort");

        sortGroup.add(noneRadio);
        noneRadio.setSelected(true);
        noneRadio.setText("None");
        sortMnu.add(noneRadio);

        sortGroup.add(ascRadio);
        ascRadio.setText("Ascending");
        sortMnu.add(ascRadio);

        sortGroup.add(descRadio);
        descRadio.setText("Descending");
        sortMnu.add(descRadio);

        sortGroup.add(mCardsFirstRadio);
        mCardsFirstRadio.setText("Marked Cards First");
        sortMnu.add(mCardsFirstRadio);

        sortGroup.add(mCardsSecRadio);
        mCardsSecRadio.setText("Marked Cards Second");
        sortMnu.add(mCardsSecRadio);

        optionMnu.add(sortMnu);

        jMenu3.setText("Timer");

        timerToggle.setText("Active");
        timerToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerToggleActionPerformed(evt);
            }
        });
        jMenu3.add(timerToggle);

        optionMnu.add(jMenu3);

        jMenuBar1.add(optionMnu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prevBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(cardNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(timeBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timeBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardNumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prevBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
        // TODO add your handling code here:
        --cardCount;
        //resets isFlipped variable to reflect that the question should be showing for new card
        isFlipped = false;
        if(timerToggle.isSelected())
        {  
            revistChk.setSelected(flashCards.get(cardCount).isMarked());
            cardNumLabel.setText(flashCards.get(cardCount).getCardNum() + "/" + flashCards.size());
            flashCardBtn.setText("");
            timeBar.setValue(timeBar.getMaximum());
        }
        else
        {
            showCard(0, flashCards.get(cardCount));
        }
        checkVis();
    }//GEN-LAST:event_prevBtnActionPerformed

    public JButton getPrev()
    {
        return prevBtn;
    }
    public JButton getNext()
    {
        return nextBtn;
    }
    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        // TODO add your handling code here:
        ++cardCount;
        //resets isFlipped variable to reflect that the question should be showing for new card
        isFlipped = false;
        if(timerToggle.isSelected())
        {   
            revistChk.setSelected(flashCards.get(cardCount).isMarked());
            cardNumLabel.setText(flashCards.get(cardCount).getCardNum() + "/" + flashCards.size());
            flashCardBtn.setText("");
            timeBar.setValue(timeBar.getMaximum());
        }
        else
        {
            isFlipped = false;
            showCard(0, flashCards.get(cardCount));            
        }
        checkVis();
    }//GEN-LAST:event_nextBtnActionPerformed

    private void flashCardBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flashCardBtnMousePressed
        // TODO add your handling code here:
        if(timerToggle.isSelected() && flashCardBtn.getText().equals("") && !isFlipped)
        {
             isFlipped = false;
             prevBtn.setEnabled(false);
             nextBtn.setEnabled(false);
            if(!flashCards.isEmpty())
            {
                this.showCard(0, flashCards.get(cardCount));
                barTimer.timer(timeBar, this, flashCards);               
            }
        }
        else
        {
            if(isFlipped)
            {
                isFlipped = false;
                if(!flashCards.isEmpty())
                {
                    showCard(0, flashCards.get(cardCount));
                }           
            }
            else
            {
                isFlipped = true;
                 prevBtn.setEnabled(true);
                 nextBtn.setEnabled(true);
                if(!flashCards.isEmpty())
                {
                    showCard(1, flashCards.get(cardCount));
                }          
            }
           
        }
    }//GEN-LAST:event_flashCardBtnMousePressed

    //opens the frame that will allow a user to make and save flash cards
    private void cardMakerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardMakerItemActionPerformed
        // TODO add your handling code here:
        //creates an object for the card maker class to open the frame to make cards
        CardMaker myCards = new CardMaker();
        //passing a refernce to CardMaker Class back to this class
        myCards.setWindowRef(this);
        //opening the CardMaker
        myCards.setVisible(true);
         //instead of closing it, make it so user can't use flashcards till cardMaker frame closes
        this.setEnabled(false);
    }//GEN-LAST:event_cardMakerItemActionPerformed

    //to bring back functionality of window once CardMaker window/class closes
    public void resetEnable()
    {
        this.setEnabled(true);
    }
    //lets the user locate and find a file to be opened and then calls the readFile method to put String data
    //formatted by the saveFile methodinto the ArrayList
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        //reset the cards before loading in the new set
        
        JFileChooser fileLoad = new JFileChooser("E:\\Quizlet FlashCard Files");
        int selection = fileLoad.showOpenDialog(openFileFrame);
        if(selection == JFileChooser.APPROVE_OPTION)
        {
            this.clearDisplayFrame();
            this.clearRevisit();
            filter.resetFilter();
            readFile(fileLoad.getSelectedFile());
            checkVis();
            cardNumLabel.setVisible(true);
            if(timerToggle.isSelected())
            {           
                revistChk.setSelected(flashCards.get(cardCount).isMarked());
                cardNumLabel.setText(flashCards.get(cardCount).getCardNum() + "/" + flashCards.size());
                flashCardBtn.setText("");
                timeBar.setValue(timeBar.getMaximum());
            }
            else
            {
                showCard(0,flashCards.get(0));
            }
            filter.setFilter(flashCards);
        }          
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void revistChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revistChkActionPerformed
        // TODO add your handling code here:
        
        if(flashCards.isEmpty())
        {
            revistChk.setSelected(false);          
        }
        else if(showRevisitOnlyChk.isSelected())
        {
            revistChk.setSelected(true);
        }
        else
        {
            flashCards.get(cardCount).setMarked(revistChk.isSelected());
            filter.getCardRef(flashCards, cardCount).setMarked(revistChk.isSelected());
        }
    }//GEN-LAST:event_revistChkActionPerformed

    public void updateDisplay()
    {
        this.checkVis();
        cardNumLabel.setVisible(true);
        this.showCard(0, flashCards.get(0));
    }
    
    private void showRevisitOnlyChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRevisitOnlyChkActionPerformed
        // TODO add your handling code here:
        //check if user wants only the marked cards
        
        if(!filter.anyMarked())
        {
            showRevisitOnlyChk.setSelected(false);
        }
        else if(showRevisitOnlyChk.isSelected() && !flashCards.isEmpty())
        {
            this.clearDisplayFrame();
            //filter out all non marked cards from flashCards          
            filter.filterUnmarkedCards(flashCards); 
            this.updateDisplay();
        }
        else if(!showRevisitOnlyChk.isSelected())
        {           
                this.clearDisplayFrame();
                flashCards.addAll(filter.getOriginal());              
               //resets card numbers for when marked only mode is turned off
               filter.resetCardNumbering(flashCards);
               this.updateDisplay();           
        }
        else
        {
            showRevisitOnlyChk.setSelected(false);
        }
                  
    }//GEN-LAST:event_showRevisitOnlyChkActionPerformed

    private void timerToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerToggleActionPerformed
        // TODO add your handling code here:
        if(timerToggle.isSelected())
        {
            //The number taken by timer constructor is length of time
            //you want it to last in seconds (30 = 30 seconds)
            barTimer = new Timer(30);
            JOptionPane.showMessageDialog(null, "You have enabled the timer, click the \ncard to reveal the Question and start the timer. \n"
                    + "The card will flip after the time runs out, or if the card is clicked normally.", "Timer Activated", JOptionPane.INFORMATION_MESSAGE);
            timeBar.setVisible(true);
            flashCardBtn.setText("");
            isFlipped = false;
        }
        else
        {
            prevBtn.setEnabled(true);
            nextBtn.setEnabled(true);
            timeBar.setVisible(false);
        }
    }//GEN-LAST:event_timerToggleActionPerformed

    private void randmCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randmCardsActionPerformed
        // TODO add your handling code here:
        if(randmCards.isSelected())
        {
            randomizeArrayList random = new randomizeArrayList();
            random.randomize(flashCards);
            filter.resetCardNumbering(flashCards);
            this.updateDisplay();
        }
        else
        {
            flashCards.clear();
            flashCards.addAll(filter.getOriginal());
            filter.resetCardNumbering(flashCards);
            this.updateDisplay();
        }
    }//GEN-LAST:event_randmCardsActionPerformed

    private void saveRevistCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRevistCardsActionPerformed
        // TODO add your handling code here:
        
        saveFile(currentFile);
        JOptionPane.showMessageDialog(null, "Cards marked for Revist updated in file", "Updated Cards", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_saveRevistCardsActionPerformed

    private void readFile(File selectedFile) 
    {    
        try {
            BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
            String line;
            String isMarked = "";
            String [] info; 
            currentFile = selectedFile;
            while ((line = reader.readLine()) != null) {
                    info = line.split("/");
                    flashCards.add(new Cards(info[0], info[1]));
                    flashCards.get(flashCards.size()-1).setCardNum(flashCards.size());

                    if((isMarked = reader.readLine()).equalsIgnoreCase("true"))
                    {
                        flashCards.get(flashCards.size()-1).setMarked(true);
                    }
                    else if(isMarked.equalsIgnoreCase("false"))
                    {
                        flashCards.get(flashCards.size()-1).setMarked(false);
                    }
                }
                reader.close();
            } catch (Exception e) {
                //System.out.println("Error: Couldn't read to file.");
                JOptionPane.showMessageDialog(null, "Error: Couldn't read file.", "Error", JOptionPane.ERROR_MESSAGE);
            }        
    }
    
    private void saveFile(File selectedFile) 
    {
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile));
                for(int i = 0; i < flashCards.size(); i++) {
                    writer.write(flashCards.get(i).getQuestion() + " /");
                    writer.write(flashCards.get(i).getAnswer() + "\n");
                    writer.write(flashCards.get(i).isMarked() + "\n");
                    
                }
                writer.close();
            } catch (Exception e) {
                //System.out.println("Error: Couldn't write to file.");
                JOptionPane.showMessageDialog(null, "Error: Couldn't write to file.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
    }
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashCards.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlashCards().setVisible(true);          
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem ascRadio;
    private javax.swing.JMenuItem cardMakerItem;
    private javax.swing.JLabel cardNumLabel;
    private javax.swing.JRadioButtonMenuItem descRadio;
    private javax.swing.JTextArea flashCardBtn;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButtonMenuItem mCardsFirstRadio;
    private javax.swing.JRadioButtonMenuItem mCardsSecRadio;
    private javax.swing.JMenu markedCardRevistMnu;
    private javax.swing.JMenu markedCardsMnu;
    private javax.swing.JButton nextBtn;
    private javax.swing.JRadioButtonMenuItem noneRadio;
    private javax.swing.JFrame openFileFrame;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenu optionMnu;
    private javax.swing.JButton prevBtn;
    private javax.swing.JCheckBoxMenuItem randmCards;
    private javax.swing.JCheckBoxMenuItem revistChk;
    private javax.swing.JFrame saveFileFrame;
    private javax.swing.JMenuItem saveRevistCards;
    private javax.swing.JCheckBoxMenuItem showRevisitOnlyChk;
    private javax.swing.ButtonGroup sortGroup;
    private javax.swing.JMenu sortMnu;
    private javax.swing.JProgressBar timeBar;
    private javax.swing.JCheckBoxMenuItem timerToggle;
    // End of variables declaration//GEN-END:variables
}
